- name: Install alloy
  ansible.builtin.include_role:
    name: grafana.grafana.alloy
  vars:
    config: |
      prometheus.remote_write "prom" {
        endpoint {
          url = "{{ prometheus_url }}"

          basic_auth {
            username = "{{ metrics_username }}"
            password = "{{ grafana_cloud_api_key }}"
          }

          queue_config { }

          metadata_config { }
        }
      }

      discovery.relabel "blobscan_api" {
        targets = [{
          __address__ = "localhost:3001",
        }]

        rule {
          source_labels = ["agent_hostname"]
          target_label  = "instance"
        }

        rule {
          target_label = "environment"
          replacement  = "{{ env }}"
        }

        rule {
          target_label = "network"
          replacement  = "{{ network }}"
        }
      }

      prometheus.scrape "blobscan_api" {
        targets    = discovery.relabel.blobscan_api.output
        forward_to = [prometheus.relabel.blobscan_api.receiver]
        job_name   = "blobscan-api"
      }

      prometheus.relabel "blobscan_api" {
        forward_to = [prometheus.remote_write.prom.receiver]

        rule {
          source_labels = ["__name__"]
          regex         = "nodejs_active_handles_total|nodejs_active_requests_total|nodejs_eventloop_lag_p50_seconds|nodejs_eventloop_lag_p99_seconds|nodejs_eventloop_lag_seconds|nodejs_external_memory_bytes|nodejs_gc_duration_seconds_count|nodejs_gc_duration_seconds_sum|nodejs_heap_size_total_bytes|nodejs_heap_size_used_bytes|nodejs_heap_space_size_used_bytes|nodejs_version_info|process_cpu_seconds_total|process_cpu_system_seconds_total|process_cpu_user_seconds_total|process_resident_memory_bytes|process_start_time_seconds"
          action        = "keep"
        }
      }

      discovery.docker "integrations_docker" {
        host             = "unix:///run/docker.sock"
        refresh_interval = "5s"
      }

      discovery.relabel "integrations_docker" {
        targets         = discovery.docker.integrations_docker.targets

        rule {
          source_labels = ["__meta_docker_container_id"]
          target_label  = "job"
          replacement   = "integrations/docker"
        }

        rule {
          source_labels = ["__meta_docker_container_id"]
          target_label  = "instance"
          replacement   = "localhost:9090"
        }

        rule {
          source_labels = ["__meta_docker_container_name"]
          regex         = "/(.*)"
          target_label  = "container"
        }

        rule {
          source_labels = ["__meta_docker_container_log_stream"]
          target_label  = "stream"
        }

        rule {
          target_label = "environment"
          replacement  = "{{ env }}"
        }

        rule {
          target_label = "network"
          replacement  = "{{ network }}"
        }
      }

      loki.write "logs_integrations" {
        endpoint {
          url = "{{ loki_url }}"
        }

        external_labels = {}
      }

      prometheus.exporter.self "integrations_agent" { }

      discovery.relabel "integrations_agent" {
        targets = prometheus.exporter.self.integrations_agent.targets

        rule {
          source_labels = ["agent_hostname"]
          target_label  = "instance"
        }

        rule {
          target_label = "environment"
          replacement  = "{{ env }}"
        }

        rule {
          target_label = "network"
          replacement  = "{{ network }}"
        }

        rule {
          target_label = "job"
          replacement  = "integrations/agent"
        }
      }

      prometheus.scrape "integrations_agent" {
        targets    = discovery.relabel.integrations_agent.output
        forward_to = [prometheus.remote_write.prom.receiver]
        job_name   = "integrations/agent"
      }

      prometheus.exporter.blackbox "integrations_blackbox" {
        config = "modules:\n  http_2xx:\n    prober: http\n    timeout: 5s\n"

        target {
          name    = "blobscan-api"
          address = "https://api.{{ domain }}"
          module  = "http_2xx"
          labels = {
            "network" = "{{ network }}",
          }
        }

        target {
          name    = "blobscan-web"
          address = "https://{{ domain }}"
          module  = "http_2xx"
          labels = {
            "network" = "{{ network }}",
          }
        }
      }

      discovery.relabel "integrations_blackbox" {
        targets = prometheus.exporter.blackbox.integrations_blackbox.targets

        rule {
          source_labels = ["__address__"]
          target_label  = "__param_target"
        }

        rule {
          source_labels = ["__param_target"]
          target_label  = "instance"
        }

        rule {
          target_label = "environment"
          replacement  = "{{ env }}"
        }

        rule {
          target_label = "network"
          replacement  = "{{ network }}"
        }

        rule {
          target_label = "job"
          replacement  = "integrations/blackbox"
        }
      }

      prometheus.scrape "integrations_blackbox" {
        targets    = discovery.relabel.integrations_blackbox.output
        forward_to = [prometheus.remote_write.prom.receiver]
        job_name   = "integrations/blackbox"
      }

      prometheus.exporter.cadvisor "integrations_cadvisor" {
        docker_only = true
      }

      discovery.relabel "integrations_cadvisor" {
        targets = prometheus.exporter.cadvisor.integrations_cadvisor.targets

        rule {
          target_label = "job"
          replacement  = "integrations/cadvisor"
        }

        rule {
          target_label = "environment"
          replacement  = "{{ env }}"
        }

        rule {
          target_label = "network"
          replacement  = "{{ network }}"
        }

        rule {
          target_label = "instance"
          replacement  = constants.hostname
        }
      }

      prometheus.scrape "integrations_cadvisor" {
        targets    = discovery.relabel.integrations_cadvisor.output
        forward_to = [prometheus.relabel.integrations_cadvisor.receiver]
        job_name   = "integrations/cadvisor"
      }

      prometheus.relabel "integrations_cadvisor" {
        forward_to = [prometheus.remote_write.prom.receiver]

        rule {
          source_labels = ["__name__"]
          regex         = "(prometheus_target_.*|prometheus_sd_discovered_targets|agent_build.*|agent_wal_samples_appended_total|process_start_time_seconds)"
          action        = "keep"
        }
      }

      prometheus.exporter.unix "integrations_node_exporter" { }

      discovery.relabel "integrations_node_exporter" {
        targets = prometheus.exporter.unix.integrations_node_exporter.targets

        rule {
          target_label = "job"
          replacement  = "integrations/node_exporter"
        }

        rule {
          target_label = "environment"
          replacement  = "{{ env }}"
        }

        rule {
          target_label = "network"
          replacement  = "{{ network }}"
        }

        rule {
          target_label = "instance"
          replacement  = constants.hostname
        }
      }

      prometheus.scrape "integrations_node_exporter" {
        targets    = discovery.relabel.integrations_node_exporter.output
        forward_to = [prometheus.remote_write.prom.receiver]
        job_name   = "integrations/node_exporter"
      }

      otelcol.receiver.jaeger "default" {
        protocols {
          thrift_http { }
        }

        output {
          traces = [otelcol.exporter.otlp.default_0.input]
        }
      }
      
      otelcol.receiver.otlp "default" {
        grpc {
          include_metadata = true
        }

        http {
          include_metadata = true
        }

        output {
          metrics = []
          logs    = []
          traces  = [otelcol.exporter.otlp.default_0.input]
        }
      }

      otelcol.exporter.otlp "default_0" {
        retry_on_failure {
          max_elapsed_time = "1m0s"
        }

        client {
          endpoint = "{{ tempo_url }}"
          headers  = {
            authorization = "Basic {{ tempo_basic_auth }}",
          }
        }
      }

#     loki.source.docker "integrations_docker" {
#       host             = "unix:///run/docker.sock"
#       targets          = discovery.docker.integrations_docker.targets
#       forward_to       = [loki.write.logs_integrations.receiver]
#       relabel_rules    = discovery.relabel.integrations_docker.rules
#     }

# TODO: Add more exporters
# redis_exporter:
# postgres_exporter:
# github_exporter:
# gcp_exporter:

- name: Add alloy user to docker group
  user:
    name: alloy
    groups:
      - docker
