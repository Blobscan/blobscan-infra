- name: Create unprivileged user for deploying and running services
  user:
    name: deploy
    shell: /bin/bash
    groups:
      # Allow deploy to run Docker and Docker Compose
      - docker

- name: Create SSH directory for the deploy user
  file:
    path: /home/deploy/.ssh
    state: directory
    mode: '0700'
    owner: deploy

# Don't allow the deploy user to set their authorized keys! Otherwise, it can escape from
# its one-command jail.
- name: Configure SSHD to read authorized keys from /etc/ssh/authorized_keys/<user>
  copy:
    src: ./authorized_keys_file.conf
    dest: /etc/ssh/sshd_config.d/authorized_keys_file.conf
  notify:
    - reload ssh

# For each service, generate an SSH key pair used for cloning git repos
# and deploying over SSH
- name: Create deploy key for each app
  command: "ssh-keygen -o -a 100 -t ed25519 -f /home/deploy/.ssh/{{ item }}.id_ed25519 -N ''"
  become: yes
  become_user: deploy
  args:
    creates: "/home/deploy/.ssh/{{ item }}.id_ed25519"
  loop: "{{ apps }}"

# Update SSH authorized keys to allow the deploy user to run the deploy script
# over SSH for each service (called deploy-<service>.sh).
# See ./update-authorized-keys.sh
- name: Allow deploy user to deploy things
  script: "./update-authorized-keys.sh {{ apps|join(' ') }}"

- name: Copy app-specific deploy scripts
  template:
    src: ./deploy-app.sh.j2
    dest: /home/deploy/deploy-{{ item }}.sh
    mode: '0770'
    owner: deploy
  loop: "{{ apps }}"

# Configure deploy's SSH to use the deploy keys generated earlier when cloning/pulling git repos.
# When cloning/pulling/etc the <app> repo, we'll use <app>.github.com, so that way, we can
# use the app-specific deploy keys transparently using deploy's SSH config. Just have to clone
# from <app>.github.com instead of github.com. See ./deploy-ssh-config.j2 template.
- name: Set up github permissions
  template:
    src: ./deploy-ssh-config.j2
    dest: /home/deploy/.ssh/config
    owner: deploy

- name: Copy the public deploy key to operator's machine
  fetch:
    src: "/home/deploy/.ssh/{{ item }}.id_ed25519.pub"
    dest: "keys"
  loop: "{{ apps }}"

- name: Copy private SSH keys for Github deploy Action to operator's machine
  fetch:
    src: "/home/deploy/.ssh/{{ item }}.id_ed25519"
    dest: "keys"
  loop: "{{ apps }}"

- name: Add Github servers to deploy's known hosts so that we skip prompts
  copy:
    src: ./known_hosts
    dest: /home/deploy/.ssh/known_hosts
    owner: deploy

- name: Copy blobscan aliases
  copy:
    src: ./blobscan_aliases.sh
    dest: /home/deploy/aliases.sh
    owner: deploy

- name: Add blobscan aliases to bashrc
  lineinfile:
    dest: "/home/deploy/.bashrc"
    line: ". $HOME/aliases.sh"
    owner: deploy

- name: Clone repositories
  command: git -C /home/deploy clone https://github.com/blobscan/{{ item }}.git
  # command: git -C /home/deploy clone git@{{ item }}.github.com:{{ github_account }}/{{ item }}.git
  args:
    creates: /home/deploy/{{ item }}/
  loop: "{{ apps }}"
  become: yes
  become_user: deploy

- name: Copy .env files
  template:
    src: ./{{ item }}-env.j2
    dest: /home/deploy/{{ item }}/.env
    owner: deploy
  loop: "{{ apps }}"
