- name: Install alloy
  ansible.builtin.include_role:
    name: grafana.grafana.alloy
  vars:
    config: |
      prometheus.remote_write "prom" {
        endpoint {
          url = "{{ prometheus_url }}"

          basic_auth {
            username = "{{ metrics_username }}"
            password = "{{ grafana_cloud_api_key }}"
          }

          queue_config { }

          metadata_config { }
        }
      }

      discovery.relabel "metrics_swarm_node" {
        targets = [
          { __address__ = "localhost:1633" },
          { __address__ = "localhost:1640" },
        ]

        rule {
          target_label = "instance"
          replacement  = constants.hostname
        }
      }

      prometheus.scrape "metrics_swarm_node" {
        targets    = discovery.relabel.metrics_swarm_node.output
        forward_to = [prometheus.relabel.metrics_swarm_node.receiver]
        job_name   = "swarm-metrics"
      }

      prometheus.relabel "metrics_swarm_node" {
        forward_to = [prometheus.remote_write.prom.receiver]

        rule {
          source_labels = ["__name__"]
          regex         = "bee_localstore_leveldb_stats_bucket"
          action        = "drop"
        }
      }

      discovery.docker "integrations_docker" {
        host             = "unix:///run/docker.sock"
        refresh_interval = "5s"
      }

      discovery.relabel "integrations_docker" {
        targets         = discovery.docker.integrations_docker.targets

        rule {
          source_labels = ["__meta_docker_container_id"]
          target_label  = "job"
          replacement   = "integrations/docker"
        }

        rule {
          source_labels = ["__meta_docker_container_id"]
          target_label  = "instance"
          replacement   = "localhost:9090"
        }

        rule {
          source_labels = ["__meta_docker_container_name"]
          regex         = "/(.*)"
          target_label  = "container"
        }

        rule {
          source_labels = ["__meta_docker_container_log_stream"]
          target_label  = "stream"
        }

        rule {
          target_label = "environment"
          replacement  = "{{ env }}"
        }
      }

      loki.write "logs_integrations" {
        endpoint {
          url = "{{ loki_url }}"
        }

        external_labels = {}
      }

      prometheus.exporter.blackbox "integrations_blackbox" {
        config = "modules:\n  http_2xx:\n    prober: http\n    timeout: 5s\n"

        target {
          name    = "swarm-node-debug"
          address = "http://localhost:1633/health"
          module  = "http_2xx"
        }
      }

      discovery.relabel "integrations_blackbox" {
        targets = prometheus.exporter.blackbox.integrations_blackbox.targets

        rule {
          target_label = "instance"
          replacement  = constants.hostname
        }

        rule {
          target_label = "environment"
          replacement  = "{{ env }}"
        }

        rule {
          target_label = "job"
          replacement  = "integrations/blackbox"
        }
      }

      prometheus.scrape "integrations_blackbox" {
        targets    = discovery.relabel.integrations_blackbox.output
        forward_to = [prometheus.remote_write.prom.receiver]
        job_name   = "integrations/blackbox"
      }

      prometheus.exporter.cadvisor "integrations_cadvisor" {
        docker_only = true
      }

      discovery.relabel "integrations_cadvisor" {
        targets = prometheus.exporter.cadvisor.integrations_cadvisor.targets

        rule {
          source_labels = ["__name__"]
          regex         = "(container_last_seen|container_cpu_usage_seconds_total|container_spec_memory_reservation_limit_bytes|container_memory_usage_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total|container_network_tcp_usage_total|container_fs_usage_bytes|container_fs_limit_bytes|container_fs_inodes_free|container_fs_inodes_total)"
          action        = "keep"
        }

        rule {
          target_label = "job"
          replacement  = "integrations/cadvisor"
        }

        rule {
          target_label = "instance"
          replacement  = constants.hostname
        }

        rule {
          target_label = "environment"
          replacement  = "{{ env }}"
        }
      }

      prometheus.scrape "integrations_cadvisor" {
        targets    = discovery.relabel.integrations_cadvisor.output
        forward_to = [prometheus.relabel.integrations_cadvisor.receiver]
        job_name   = "integrations/cadvisor"
      }

      prometheus.relabel "integrations_cadvisor" {
        forward_to = [prometheus.remote_write.prom.receiver]
      }

      prometheus.exporter.unix "integrations_node_exporter" { }

      discovery.relabel "integrations_node_exporter" {
        targets = prometheus.exporter.unix.integrations_node_exporter.targets

        rule {
          source_labels = ["__name__"]
          regex         = "(prometheus_fanout_latency_bucket|prometheus_target_sync_length_seconds)"
          action        = "drop"
        }

        rule {
          target_label = "job"
          replacement  = "integrations/node_exporter"
        }

        rule {
          target_label = "instance"
          replacement  = constants.hostname
        }

        rule {
          target_label = "environment"
          replacement  = "{{ env }}"
        }
      }

      prometheus.scrape "integrations_node_exporter" {
        targets    = discovery.relabel.integrations_node_exporter.output
        forward_to = [prometheus.remote_write.prom.receiver]
        job_name   = "integrations/node_exporter"
      }

      otelcol.receiver.jaeger "default" {
        protocols {
          thrift_http { }
        }

        output {
          traces = [otelcol.exporter.otlp.default_0.input]
        }
      }

      otelcol.receiver.otlp "default" {
        grpc {
          include_metadata = true
        }

        http {
          include_metadata = true
        }

        output {
          metrics = []
          logs    = []
          traces  = [otelcol.exporter.otlp.default_0.input]
        }
      }

      otelcol.exporter.otlp "default_0" {
        retry_on_failure {
          max_elapsed_time = "1m0s"
        }

        client {
          endpoint = "{{ tempo_url }}"
          headers  = {
            authorization = "Basic {{ tempo_basic_auth }}",
          }
        }
      }

#      loki.source.docker "integrations_docker" {
#        host             = "unix:///run/docker.sock"
#        targets          = discovery.docker.integrations_docker.targets
#        forward_to       = [loki.write.logs_integrations.receiver]
#        relabel_rules    = discovery.relabel.integrations_docker.rules
#        refresh_interval = "5s"
#      }

- name: Add alloy user to docker group
  user:
    name: alloy
    groups:
      - docker

- name: Run swarm-batch-exporter
  community.docker.docker_container:
    name: "swarm-batch-prometheus"
    image: "blossomlabs/swarm-batch-prometheus"
    image_name_mismatch: recreate
    network_mode: host
    state: started
    restart_policy: always
    pull: "always"

- name: Run bee-dashboard
  community.docker.docker_container:
    name: "bee-dashboard"
    image: "pablocastellano/bee-dashboard"
    image_name_mismatch: recreate
    network_mode: host
    state: started
    restart_policy: always
    pull: "always"
